/* eslint-disable */
// @ts-nocheck
/* THIS FILE IS AUTOGENERATED, DO NOT EDIT IT! instead, edit one of the `.graphql` files in this project and run `yarn graphql-codegen` for this file to be re-created */
import { GraphQLClient } from 'graphql-request';
import { RequestInit } from 'graphql-request/dist/types.dom';
import { useQuery, UseQueryOptions } from '@tanstack/react-query';

function fetcher<TData, TVariables extends { [key: string]: any }>(client: GraphQLClient, query: string, variables?: TVariables, requestHeaders?: RequestInit['headers']) {
  return async (): Promise<TData> => client.request({
    document: query,
    variables,
    requestHeaders
  });
}
export type CategoriesBySlugUrlQueryVariables = Exact<{
  categorySlug?: InputMaybe<Scalars['String']['input']>;
}>;


export type CategoriesBySlugUrlQuery = { __typename?: 'Query', categories?: { __typename?: 'CategoryEntityResponseCollection', data: Array<{ __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null } | null }> } | null };

export type GetPostsByCategorySlugQueryVariables = Exact<{
  categorySlug?: InputMaybe<Scalars['String']['input']>;
  start?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetPostsByCategorySlugQuery = { __typename?: 'Query', posts?: { __typename?: 'PostEntityResponseCollection', data: Array<{ __typename?: 'PostEntity', id?: string | null, attributes?: { __typename?: 'Post', title: string, description: string, content?: string | null, slugUrl?: string | null, publishedAt?: any | null, cover?: { __typename?: 'UploadFileEntityResponse', data?: { __typename?: 'UploadFileEntity', attributes?: { __typename?: 'UploadFile', url: string } | null } | null } | null, category?: { __typename?: 'CategoryEntityResponse', data?: { __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null } | null } | null } | null } | null }> } | null };

export type GetParentCategoriesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetParentCategoriesQuery = { __typename?: 'Query', categories?: { __typename?: 'CategoryEntityResponseCollection', data: Array<{ __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null, child_categories?: { __typename?: 'CategoryRelationResponseCollection', data: Array<{ __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null } | null }> } | null } | null }> } | null };

export type CatWithChildBySlugUrlQueryVariables = Exact<{
  categorySlug?: InputMaybe<Scalars['String']['input']>;
}>;


export type CatWithChildBySlugUrlQuery = { __typename?: 'Query', categories?: { __typename?: 'CategoryEntityResponseCollection', data: Array<{ __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null, child_categories?: { __typename?: 'CategoryRelationResponseCollection', data: Array<{ __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null } | null }> } | null } | null }> } | null };

export type FeaturedPostsQueryVariables = Exact<{
  start?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type FeaturedPostsQuery = { __typename?: 'Query', posts?: { __typename?: 'PostEntityResponseCollection', data: Array<{ __typename?: 'PostEntity', id?: string | null, attributes?: { __typename?: 'Post', title: string, description: string, slugUrl?: string | null, publishedAt?: any | null, category?: { __typename?: 'CategoryEntityResponse', data?: { __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null } | null } | null } | null, cover?: { __typename?: 'UploadFileEntityResponse', data?: { __typename?: 'UploadFileEntity', attributes?: { __typename?: 'UploadFile', url: string } | null } | null } | null } | null }>, meta: { __typename?: 'ResponseCollectionMeta', pagination: { __typename?: 'Pagination', total: number, page: number, pageSize: number, pageCount: number } } } | null };

export type GetAllPostsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllPostsQuery = { __typename?: 'Query', posts?: { __typename?: 'PostEntityResponseCollection', data: Array<{ __typename?: 'PostEntity', id?: string | null, attributes?: { __typename?: 'Post', title: string, description: string, slugUrl?: string | null, publishedAt?: any | null, category?: { __typename?: 'CategoryEntityResponse', data?: { __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null } | null } | null } | null, cover?: { __typename?: 'UploadFileEntityResponse', data?: { __typename?: 'UploadFileEntity', attributes?: { __typename?: 'UploadFile', url: string } | null } | null } | null } | null }> } | null };

export type GetPostBySlugQueryVariables = Exact<{
  slug?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetPostBySlugQuery = { __typename?: 'Query', posts?: { __typename?: 'PostEntityResponseCollection', data: Array<{ __typename?: 'PostEntity', id?: string | null, attributes?: { __typename?: 'Post', title: string, description: string, content?: string | null, slugUrl?: string | null, createdAt?: any | null, updatedAt?: any | null, publishedAt?: any | null, category?: { __typename?: 'CategoryEntityResponse', data?: { __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null } | null } | null } | null, cover?: { __typename?: 'UploadFileEntityResponse', data?: { __typename?: 'UploadFileEntity', id?: string | null, attributes?: { __typename?: 'UploadFile', url: string } | null } | null } | null } | null }> } | null };

export type PostByFilterQueryVariables = Exact<{
  filter?: InputMaybe<PostFiltersInput>;
  page?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
}>;


export type PostByFilterQuery = { __typename?: 'Query', posts?: { __typename?: 'PostEntityResponseCollection', data: Array<{ __typename?: 'PostEntity', id?: string | null, attributes?: { __typename?: 'Post', title: string, description: string, content?: string | null, slugUrl?: string | null, publishedAt?: any | null, cover?: { __typename?: 'UploadFileEntityResponse', data?: { __typename?: 'UploadFileEntity', attributes?: { __typename?: 'UploadFile', url: string } | null } | null } | null, category?: { __typename?: 'CategoryEntityResponse', data?: { __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null } | null } | null } | null } | null }>, meta: { __typename?: 'ResponseCollectionMeta', pagination: { __typename?: 'Pagination', total: number, page: number, pageSize: number, pageCount: number } } } | null };


export const CategoriesBySlugUrlDocument = `
    query CategoriesBySlugUrl($categorySlug: String) {
  categories(
    filters: {slugUrl: {eq: $categorySlug}}
    publicationState: LIVE
    pagination: {limit: 1}
  ) {
    data {
      id
      attributes {
        title
        slugUrl
      }
    }
  }
}
    `;
export const useCategoriesBySlugUrlQuery = <
      TData = CategoriesBySlugUrlQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: CategoriesBySlugUrlQueryVariables,
      options?: UseQueryOptions<CategoriesBySlugUrlQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<CategoriesBySlugUrlQuery, TError, TData>(
      variables === undefined ? ['CategoriesBySlugUrl'] : ['CategoriesBySlugUrl', variables],
      fetcher<CategoriesBySlugUrlQuery, CategoriesBySlugUrlQueryVariables>(client, CategoriesBySlugUrlDocument, variables, headers),
      options
    );
export const GetPostsByCategorySlugDocument = `
    query GetPostsByCategorySlug($categorySlug: String, $start: Int, $limit: Int) {
  posts(
    filters: {or: [{category: {slugUrl: {eq: $categorySlug}}}, {category: {parent_category: {slugUrl: {eq: $categorySlug}}}}]}
    pagination: {start: $start, limit: $limit}
    publicationState: LIVE
  ) {
    data {
      id
      attributes {
        title
        description
        content
        slugUrl
        publishedAt
        cover {
          data {
            attributes {
              url
            }
          }
        }
        category {
          data {
            attributes {
              title
              slugUrl
            }
            id
          }
        }
      }
    }
  }
}
    `;
export const useGetPostsByCategorySlugQuery = <
      TData = GetPostsByCategorySlugQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: GetPostsByCategorySlugQueryVariables,
      options?: UseQueryOptions<GetPostsByCategorySlugQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<GetPostsByCategorySlugQuery, TError, TData>(
      variables === undefined ? ['GetPostsByCategorySlug'] : ['GetPostsByCategorySlug', variables],
      fetcher<GetPostsByCategorySlugQuery, GetPostsByCategorySlugQueryVariables>(client, GetPostsByCategorySlugDocument, variables, headers),
      options
    );
export const GetParentCategoriesDocument = `
    query GetParentCategories {
  categories(filters: {parent_category: {id: {null: true}}}) {
    data {
      id
      attributes {
        title
        slugUrl
        child_categories {
          data {
            id
            attributes {
              title
              slugUrl
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetParentCategoriesQuery = <
      TData = GetParentCategoriesQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: GetParentCategoriesQueryVariables,
      options?: UseQueryOptions<GetParentCategoriesQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<GetParentCategoriesQuery, TError, TData>(
      variables === undefined ? ['GetParentCategories'] : ['GetParentCategories', variables],
      fetcher<GetParentCategoriesQuery, GetParentCategoriesQueryVariables>(client, GetParentCategoriesDocument, variables, headers),
      options
    );
export const CatWithChildBySlugUrlDocument = `
    query CatWithChildBySlugUrl($categorySlug: String) {
  categories(
    filters: {slugUrl: {eq: $categorySlug}}
    publicationState: LIVE
    pagination: {limit: 1}
  ) {
    data {
      id
      attributes {
        title
        slugUrl
        child_categories {
          data {
            id
            attributes {
              title
              slugUrl
            }
          }
        }
      }
    }
  }
}
    `;
export const useCatWithChildBySlugUrlQuery = <
      TData = CatWithChildBySlugUrlQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: CatWithChildBySlugUrlQueryVariables,
      options?: UseQueryOptions<CatWithChildBySlugUrlQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<CatWithChildBySlugUrlQuery, TError, TData>(
      variables === undefined ? ['CatWithChildBySlugUrl'] : ['CatWithChildBySlugUrl', variables],
      fetcher<CatWithChildBySlugUrlQuery, CatWithChildBySlugUrlQueryVariables>(client, CatWithChildBySlugUrlDocument, variables, headers),
      options
    );
export const FeaturedPostsDocument = `
    query FeaturedPosts($start: Int, $limit: Int) {
  posts(
    sort: "publishedAt:DESC"
    pagination: {start: $start, limit: $limit}
    publicationState: LIVE
  ) {
    data {
      id
      attributes {
        category {
          data {
            id
            attributes {
              title
              slugUrl
            }
          }
        }
        title
        description
        cover {
          data {
            attributes {
              url
            }
          }
        }
        slugUrl
        publishedAt
      }
    }
    meta {
      pagination {
        total
        page
        pageSize
        pageCount
      }
    }
  }
}
    `;
export const useFeaturedPostsQuery = <
      TData = FeaturedPostsQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: FeaturedPostsQueryVariables,
      options?: UseQueryOptions<FeaturedPostsQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<FeaturedPostsQuery, TError, TData>(
      variables === undefined ? ['FeaturedPosts'] : ['FeaturedPosts', variables],
      fetcher<FeaturedPostsQuery, FeaturedPostsQueryVariables>(client, FeaturedPostsDocument, variables, headers),
      options
    );
export const GetAllPostsDocument = `
    query GetAllPosts {
  posts {
    data {
      id
      attributes {
        category {
          data {
            id
            attributes {
              title
              slugUrl
            }
          }
        }
        title
        description
        cover {
          data {
            attributes {
              url
            }
          }
        }
        slugUrl
        publishedAt
      }
    }
  }
}
    `;
export const useGetAllPostsQuery = <
      TData = GetAllPostsQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: GetAllPostsQueryVariables,
      options?: UseQueryOptions<GetAllPostsQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<GetAllPostsQuery, TError, TData>(
      variables === undefined ? ['GetAllPosts'] : ['GetAllPosts', variables],
      fetcher<GetAllPostsQuery, GetAllPostsQueryVariables>(client, GetAllPostsDocument, variables, headers),
      options
    );
export const GetPostBySlugDocument = `
    query GetPostBySlug($slug: String) {
  posts(filters: {slugUrl: {eq: $slug}}) {
    data {
      id
      attributes {
        title
        description
        content
        slugUrl
        createdAt
        updatedAt
        publishedAt
        category {
          data {
            id
            attributes {
              title
              slugUrl
            }
          }
        }
        cover {
          data {
            id
            attributes {
              url
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetPostBySlugQuery = <
      TData = GetPostBySlugQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: GetPostBySlugQueryVariables,
      options?: UseQueryOptions<GetPostBySlugQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<GetPostBySlugQuery, TError, TData>(
      variables === undefined ? ['GetPostBySlug'] : ['GetPostBySlug', variables],
      fetcher<GetPostBySlugQuery, GetPostBySlugQueryVariables>(client, GetPostBySlugDocument, variables, headers),
      options
    );
export const PostByFilterDocument = `
    query PostByFilter($filter: PostFiltersInput, $page: Int, $pageSize: Int) {
  posts(
    filters: $filter
    pagination: {page: $page, pageSize: $pageSize}
    publicationState: LIVE
  ) {
    data {
      id
      attributes {
        title
        description
        content
        slugUrl
        publishedAt
        cover {
          data {
            attributes {
              url
            }
          }
        }
        category {
          data {
            attributes {
              title
              slugUrl
            }
            id
          }
        }
      }
    }
    meta {
      pagination {
        total
        page
        pageSize
        pageCount
      }
    }
  }
}
    `;
export const usePostByFilterQuery = <
      TData = PostByFilterQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: PostByFilterQueryVariables,
      options?: UseQueryOptions<PostByFilterQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<PostByFilterQuery, TError, TData>(
      variables === undefined ? ['PostByFilter'] : ['PostByFilter', variables],
      fetcher<PostByFilterQuery, PostByFilterQueryVariables>(client, PostByFilterDocument, variables, headers),
      options
    );