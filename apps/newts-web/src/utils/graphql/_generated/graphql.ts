/* eslint-disable */
// @ts-nocheck
/* THIS FILE IS AUTOGENERATED, DO NOT EDIT IT! instead, edit one of the `.graphql` files in this project and run `yarn graphql-codegen` for this file to be re-created */
import { GraphQLClient } from 'graphql-request';
import { RequestInit } from 'graphql-request/dist/types.dom';
import { useQuery, UseQueryOptions } from '@tanstack/react-query';

function fetcher<TData, TVariables extends { [key: string]: any }>(client: GraphQLClient, query: string, variables?: TVariables, requestHeaders?: RequestInit['headers']) {
  return async (): Promise<TData> => client.request({
    document: query,
    variables,
    requestHeaders
  });
}
export type GetParentCategoriesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetParentCategoriesQuery = { __typename?: 'Query', categories?: { __typename?: 'CategoryEntityResponseCollection', data: Array<{ __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null, child_categories?: { __typename?: 'CategoryRelationResponseCollection', data: Array<{ __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null } | null }> } | null } | null }> } | null };

export type GetAllPostsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllPostsQuery = { __typename?: 'Query', posts?: { __typename?: 'PostEntityResponseCollection', data: Array<{ __typename?: 'PostEntity', id?: string | null, attributes?: { __typename?: 'Post', title: string, description: string, slugUrl?: string | null, publishedAt?: any | null, category?: { __typename?: 'CategoryEntityResponse', data?: { __typename?: 'CategoryEntity', id?: string | null, attributes?: { __typename?: 'Category', title: string, slugUrl?: string | null } | null } | null } | null, cover?: { __typename?: 'UploadFileEntityResponse', data?: { __typename?: 'UploadFileEntity', attributes?: { __typename?: 'UploadFile', url: string } | null } | null } | null } | null }> } | null };


export const GetParentCategoriesDocument = `
    query GetParentCategories {
  categories(filters: {parent_category: {id: {null: true}}}) {
    data {
      id
      attributes {
        title
        slugUrl
        child_categories {
          data {
            id
            attributes {
              title
              slugUrl
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetParentCategoriesQuery = <
      TData = GetParentCategoriesQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: GetParentCategoriesQueryVariables,
      options?: UseQueryOptions<GetParentCategoriesQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<GetParentCategoriesQuery, TError, TData>(
      variables === undefined ? ['GetParentCategories'] : ['GetParentCategories', variables],
      fetcher<GetParentCategoriesQuery, GetParentCategoriesQueryVariables>(client, GetParentCategoriesDocument, variables, headers),
      options
    );
export const GetAllPostsDocument = `
    query GetAllPosts {
  posts {
    data {
      id
      attributes {
        category {
          data {
            id
            attributes {
              title
              slugUrl
            }
          }
        }
        title
        description
        cover {
          data {
            attributes {
              url
            }
          }
        }
        slugUrl
        publishedAt
      }
    }
  }
}
    `;
export const useGetAllPostsQuery = <
      TData = GetAllPostsQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: GetAllPostsQueryVariables,
      options?: UseQueryOptions<GetAllPostsQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<GetAllPostsQuery, TError, TData>(
      variables === undefined ? ['GetAllPosts'] : ['GetAllPosts', variables],
      fetcher<GetAllPostsQuery, GetAllPostsQueryVariables>(client, GetAllPostsDocument, variables, headers),
      options
    );